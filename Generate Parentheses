//Initial Template for C++

#include <bits/stdc++.h>
using namespace std;
vector<string> AllParenthesis(int n) ;



class Solution
{
    private:
void solve(string curr,vector<string>& res,int open,int close,int n)
{
    //base case
    if(open==n && close==n)
    {
        res.push_back(curr);
        return;
    }
    // we can add open and close bracket when no.closed bracket is less than open bracket
    if(close<open)
    {
        solve(curr+')',res,open,close+1,n);
        if(open<n)
        solve(curr+'(',res,open+1,close,n);
    }
    // we can add only open bracket when open and closed bracket are same
    if(open==close)
    solve(curr+'(',res,open+1,close,n);
}
    public:
    vector<string> AllParenthesis(int n) 
    {
        vector<string> res;
        string curr="";
        solve(curr,res,0,0,n);
        return res;
    }
};


int main() 
{ 
	int t;
	cin>>t;
	while(t--)
	{
		int n;
		cin>>n;
		Solution ob;
		vector<string> result = ob.AllParenthesis(n); 
		sort(result.begin(),result.end());
		for (int i = 0; i < result.size(); ++i)
			cout<<result[i]<<"\n";
	}
	return 0; 
} 
